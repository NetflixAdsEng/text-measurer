{"version":3,"sources":["TextMeasurer.js"],"names":["TextMeasurer","PADDING_TO_HEIGHT","FONT_KEYS","fontFamily","fontWeight","fontSize","_centerText","canvasHeight","_bgColor","_textColor","_queueRecalc","_center","parseInt","canvas","document","createElement","context","getContext","text","_initializeCanvas","fontOpts","fontKeys","Object","keys","filter","key","includes","length","forEach","font","width","defaultPad","Math","round","defaultHeight","height","pad","textBaseline","textAlign","centerText","useCenterOfMass","usePerChar","measureFn","measureResult","getCM","getAbsCenter","getAvgOfPerLetterMedian","fillText","getImageData","center","_topY","topY","_bottomY","bottomY","fixingOffset","fillStyle","fillRect","clearRect","top","bottom","centerCalcOpts","getCenterOfText","_imageData","centerResultsPerChar","Array","prototype","call","c","test","map","char","imgData","console","log","totalWidth","getSum","result","reduce","min","Infinity","max","nums","sum","num","avg","imageData","data","imageDataRowWidth","totalAlpha","alphaTimesY","i","n","rowIdx","floor","alpha","undefined","getBottomY"],"mappings":"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","file":"TextMeasurer.min.map","sourceRoot":"../src","sourcesContent":["const PADDING_TO_HEIGHT = 0.2\nconst FONT_KEYS = ['fontFamily', 'fontWeight', 'fontSize']\n\nclass TextMeasurer {\n\tconstructor({\n\t\tfontFamily = 'Times',\n\t\tfontWeight = 'normal',\n\t\tfontSize = 200,\n\t\t_centerText = false,\n\t\tcanvasHeight,\n\t\t_bgColor,\n\t\t_textColor\n\t} = {}) {\n\t\tthis._queueRecalc = true\n\t\tthis._center = 0\n\t\tthis.fontFamily = fontFamily\n\t\tthis.fontWeight = fontWeight\n\t\tthis.canvasHeight = canvasHeight\n\t\tthis.fontSize = parseInt(fontSize, 10)\n\t\tthis.canvas = document.createElement('canvas')\n\t\tthis.context = this.canvas.getContext('2d')\n\t\tthis.text = ''\n\t\tthis._centerText = _centerText\n\t\tthis._bgColor = _bgColor\n\t\tthis._textColor = _textColor\n\t\tthis._initializeCanvas(this.text)\n\t}\n\n\tupdateFont(fontOpts = {}) {\n\t\tconst fontKeys = Object.keys(fontOpts).filter(key => FONT_KEYS.includes(key))\n\t\tif (fontKeys.length) {\n\t\t\tfontKeys.forEach(key => {\n\t\t\t\tif (fontOpts[key]) {\n\t\t\t\t\tthis[key] = fontOpts[key]\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tthis.context.font = `${this.fontWeight} ${this.fontSize}px ${this.fontFamily}`\n\t\t}\n\t}\n\n\t_initializeCanvas(text) {\n\t\t// approximating min necessary width to fit text\n\t\tthis.canvas.width = this.fontSize * text.length\n\t\t// adding padding to account for accents and such\n\t\tconst defaultPad = Math.round(PADDING_TO_HEIGHT * this.fontSize)\n\t\tconst defaultHeight = this.fontSize + defaultPad * 2\n\t\tif (this.canvasHeight && this.canvasHeight >= defaultHeight) {\n\t\t\tthis.canvas.height = this.canvasHeight\n\t\t\tthis.pad = Math.round((this.canvasHeight - this.fontSize) / 2)\n\t\t} else {\n\t\t\tthis.pad = defaultPad\n\t\t\tthis.canvas.height = defaultHeight\n\t\t}\n\t\tthis._center = this.canvas.height / 2\n\t\tthis.context.font = `${this.fontWeight} ${this.fontSize}px ${this.fontFamily}`\n\t\tthis.context.textBaseline = 'top'\n\t\tthis.context.textAlign = 'center'\n\t}\n\n\tgetCenterOfText(text, { centerText = false, useCenterOfMass = true, usePerChar = false } = {}) {\n\t\tconst { canvas, context } = this\n\n\t\t// context.clearRect(0, 0, canvas.width, canvas.height);\n\n\t\tthis.text = text || this.text\n\t\tthis._initializeCanvas(this.text)\n\n\t\tconst measureFn = useCenterOfMass ? getCM : getAbsCenter\n\n\t\tlet measureResult\n\t\tif (usePerChar) {\n\t\t\tmeasureResult = this.getAvgOfPerLetterMedian(this.text, measureFn)\n\t\t} else {\n\t\t\tcontext.fillText(this.text, Math.round(canvas.width / 2), this.pad, canvas.width)\n\t\t\tconst imgData = context.getImageData(0, 0, canvas.width, canvas.height)\n\n\t\t\tmeasureResult = measureFn(imgData)\n\t\t}\n\n\t\tthis._center = measureResult.center\n\t\tthis._topY = measureResult.topY\n\t\tthis._bottomY = measureResult.bottomY\n\t\tthis._queueRecalc = false\n\n\t\t// center text\n\t\t// for debug purposes when rendering internal canvas\n\t\tif (centerText || this._bgColor || this._textColor) {\n\t\t\tconst fixingOffset = centerText ? canvas.height / 2 - this._center : 0\n\n\t\t\tif (this._bgColor) {\n\t\t\t\tcontext.fillStyle = this._bgColor\n\t\t\t\tcontext.fillRect(0, 0, canvas.width, canvas.height)\n\t\t\t} else {\n\t\t\t\tcontext.clearRect(0, 0, canvas.width, canvas.height)\n\t\t\t}\n\n\t\t\tthis._textColor && (context.fillStyle = this._textColor)\n\t\t\tcontext.fillText(this.text, Math.round(canvas.width / 2), this.pad + fixingOffset, canvas.width)\n\t\t}\n\n\t\treturn this._center\n\t}\n\n\tgetVerticalPoints() {\n\t\treturn {\n\t\t\ttop: this._topY - this.pad,\n\t\t\tbottom: this._bottomY - this.pad\n\t\t}\n\t}\n\n\t// get offset which should vertically center text according to its calculated center\n\tgetCenteringOffset(text, centerCalcOpts) {\n\t\tconst center = this.getCenterOfText(text, centerCalcOpts)\n\t\tcontext.fillText(this.text, Math.round(canvas.width / 2), this.pad, canvas.width)\n\t\tthis._imageData = context.getImageData(0, 0, canvas.width, canvas.height)\n\n\t\tconst measureFn = useCenterOfMass ? getCM : getAbsCenter\n\t\tconst measureResult = measureFn(this._imageData)\n\t\treturn this.canvas.height / 2 - center\n\t}\n\n\t// get percentage of text height at which center occurs\n\tgetCenterHeightPercentage(text, centerCalcOpts) {\n\t\tconst center = this.getCenterOfText(text, centerCalcOpts)\n\n\t\t// get top and bottom y vals after calculating center\n\t\t// const topY = this._topY;\n\t\t// const bottomY = this._bottomY;\n\t\tconst topY = this.pad\n\t\tconst bottomY = this.canvas.height - this.pad\n\n\t\treturn (center - topY) / (bottomY - topY)\n\t}\n\n\tgetAvgOfPerLetterMedian(text, measureFn) {\n\t\tconst textWithoutSpaces = Array.prototype.filter.call(text, c => !/\\s/.test(c))\n\t\tconst centerResultsPerChar = textWithoutSpaces.map(char => {\n\t\t\tthis._initializeCanvas(char)\n\t\t\tthis.context.fillText(char, Math.round(this.canvas.width / 2), this.pad, this.canvas.width)\n\t\t\tconst imgData = this.context.getImageData(0, 0, this.canvas.width, this.canvas.height)\n\n\t\t\tconst measureResult = measureFn(imgData)\n\t\t\tmeasureResult.width = this.canvas.width\n\n\t\t\treturn measureResult\n\t\t})\n\n\t\tconsole.log('centerResultsPerChar', centerResultsPerChar)\n\n\t\t// reset canvas\n\t\tthis._initializeCanvas(text)\n\n\t\tconst totalWidth = getSum(centerResultsPerChar.map(result => result.width))\n\t\tconst centerWidthProducts = centerResultsPerChar.map(({ center, width }) => center * width)\n\t\tconst center = getSum(centerWidthProducts) / totalWidth\n\n\t\tconst topY = centerResultsPerChar.reduce((top, result) => Math.min(top, result.top), Infinity)\n\t\tconst bottomY = centerResultsPerChar.reduce((bottom, result) => Math.max(bottom, result.bottom), -Infinity)\n\n\t\treturn {\n\t\t\tcenter,\n\t\t\ttopY,\n\t\t\tbottomY\n\t\t}\n\t}\n}\n\nfunction getSum(nums) {\n\treturn nums.reduce((sum, num) => sum + num)\n}\n\nfunction avg(nums) {\n\tconst sum = getSum(nums)\n\tconst n = nums.length\n\treturn sum / n\n}\n\n// get center of mass based on alpha value at each ImageData pixel\nfunction getCM(imageData) {\n\tconst { data, height, width } = imageData\n\tconst imageDataRowWidth = 4 * width\n\tlet totalAlpha = 0,\n\t\ttopY\n\t// sum of (alpha value * y value in image matrix)\n\tlet alphaTimesY = 0\n\tfor (let i = 3, n = data.length; i < n; i += 4) {\n\t\tconst rowIdx = Math.floor(i / imageDataRowWidth)\n\t\tconst alpha = data[i]\n\t\tif (alpha > 0) {\n\t\t\t// store first rowIdx when alpha is greater than zero\n\t\t\tif (topY === undefined) {\n\t\t\t\ttopY = rowIdx\n\t\t\t}\n\n\t\t\talphaTimesY += alpha * (rowIdx + 0.5)\n\t\t\ttotalAlpha += alpha\n\t\t}\n\t}\n\n\tif (topY === undefined) {\n\t\ttopY = 0\n\t}\n\n\tconst center = alphaTimesY / totalAlpha\n\tconst bottomY = getBottomY(imageData)\n\treturn { center, bottomY, topY }\n}\n\nfunction getAbsCenter(imageData) {\n\tconst { data, height, width } = imageData\n\tconst imageDataRowWidth = 4 * width\n\n\tlet topY = 0\n\t// find top y-value of text\n\tfor (let i = 3, n = data.length; i < n; i += 4) {\n\t\tconst rowIdx = Math.floor(i / imageDataRowWidth)\n\t\tconst alpha = data[i]\n\t\tif (alpha > 0) {\n\t\t\ttopY = rowIdx\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// find bottom y-value of text\n\tconst bottomY = getBottomY(imageData)\n\n\treturn {\n\t\tcenter: Math.round((topY + bottomY) / 2),\n\t\tbottomY,\n\t\ttopY\n\t}\n}\n\nfunction getBottomY(imageData) {\n\tconst { data, height, width } = imageData\n\tconst imageDataRowWidth = 4 * width\n\n\t// find bottom y-value in imageData\n\tfor (let i = data.length - 1; i > 0; i -= 4) {\n\t\tconst rowIdx = Math.floor(i / imageDataRowWidth)\n\t\tconst alpha = data[i]\n\t\tif (alpha > 0) {\n\t\t\treturn rowIdx\n\t\t}\n\t}\n\t// if don't find nonzero alpha value, return last idx value\n\treturn height - 1\n}\n\nexport default TextMeasurer\n"]}