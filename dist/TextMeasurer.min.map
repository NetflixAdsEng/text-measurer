{"version":3,"sources":["TextMeasurer.js"],"names":["TextMeasurer","PADDING_TO_HEIGHT","FONT_KEYS","fontFamily","fontWeight","fontSize","canvasHeight","_centerText","_bgColor","_textColor","canvas","document","createElement","context","getContext","text","updateFont","_initializeCanvas","fontOpts","fontKeys","Object","keys","filter","key","includes","length","forEach","parseInt","width","defaultPad","Math","round","defaultHeight","height","pad","_center","font","textBaseline","textAlign","_topY","_bottomY","_centerY","clearRect","fillText","imageData","getImageData","prop","measureFn","renderText","undefined","_calcMetric","getTopY","getBottomY","useCenterOfMass","getCM","getAbsCenter","centerText","usePerChar","measureResult","getAvgOfPerLetterMedian","center","topY","bottomY","fixingOffset","fillStyle","fillRect","centerCalcOpts","getCenterOfText","centerResultsPerChar","Array","prototype","call","c","test","map","char","imgData","totalWidth","getSum","result","reduce","top","min","Infinity","bottom","max","nums","sum","num","avg","data","imageDataRowWidth","totalAlpha","alphaTimesY","i","n","rowIdx","floor","alpha"],"mappings":"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","file":"TextMeasurer.min.map","sourceRoot":"../src","sourcesContent":["const PADDING_TO_HEIGHT = 0.2\nconst FONT_KEYS = ['fontFamily', 'fontWeight', 'fontSize']\n\nclass TextMeasurer {\n\tconstructor({\n\t\tfontFamily = 'Times',\n\t\tfontWeight = 'normal',\n\t\tfontSize = 200,\n\t\tcanvasHeight,\n\t\t_centerText = false,\n\t\t_bgColor,\n\t\t_textColor\n\t} = {}) {\n\t\tthis.canvasHeight = canvasHeight\n\t\tthis.canvas = document.createElement('canvas')\n\t\tthis.context = this.canvas.getContext('2d')\n\t\tthis.text = ''\n\t\tthis._centerText = _centerText\n\t\tthis._bgColor = _bgColor\n\t\tthis._textColor = _textColor\n\t\tthis.updateFont({\n\t\t\tfontFamily,\n\t\t\tfontWeight,\n\t\t\tfontSize\n\t\t})\n\t\tthis._initializeCanvas(this.text)\n\t}\n\n\tupdateFont(fontOpts = {}) {\n\t\tconst fontKeys = Object.keys(fontOpts).filter(key => FONT_KEYS.includes(key))\n\t\tif (fontKeys.length) {\n\t\t\tfontKeys.forEach(key => {\n\t\t\t\tif (fontOpts[key]) {\n\t\t\t\t\tif (fontOpts[key] === 'fontSize') {\n\t\t\t\t\t\tthis[key] = parseInt(fontOpts[key], 10)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis[key] = fontOpts[key]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t// this.context.font = `${this.fontWeight} ${this.fontSize}px ${this.fontFamily}`\n\t\t}\n\t}\n\n\t_initializeCanvas(text) {\n\t\t// approximating min necessary width to fit text\n\t\tthis.canvas.width = this.fontSize * text.length\n\t\t// adding padding to account for accents and such\n\t\tconst defaultPad = Math.round(PADDING_TO_HEIGHT * this.fontSize)\n\t\tconst defaultHeight = this.fontSize + defaultPad * 2\n\t\tif (this.canvasHeight && this.canvasHeight >= defaultHeight) {\n\t\t\tthis.canvas.height = this.canvasHeight\n\t\t\tthis.pad = Math.round((this.canvasHeight - this.fontSize) / 2)\n\t\t} else {\n\t\t\tthis.pad = defaultPad\n\t\t\tthis.canvas.height = defaultHeight\n\t\t}\n\t\tthis._center = this.canvas.height / 2\n\t\tthis.context.font = `${this.fontWeight} ${this.fontSize}px ${this.fontFamily}`\n\t\tthis.context.textBaseline = 'top'\n\t\tthis.context.textAlign = 'center'\n\t}\n\n\trenderText(text) {\n\t\tconst { canvas, context } = this\n\n\t\t// skip rerender if same text\n\t\tif (text === this.text) {\n\t\t\treturn\n\t\t}\n\n\t\t// reset internal metric values\n\t\tdelete this._topY\n\t\tdelete this._bottomY\n\t\tdelete this._centerY\n\n\t\tthis.text = text || this.text\n\t\tthis._initializeCanvas(this.text)\n\t\tcontext.clearRect(0, 0, canvas.width, canvas.height)\n\t\tcontext.fillText(this.text, Math.round(canvas.width / 2), this.pad, canvas.width)\n\t\tthis.imageData = context.getImageData(0, 0, canvas.width, canvas.height)\n\t}\n\n\t// internal base function for calculating or pulling cached metric\n\t_calcMetric(text, prop, measureFn) {\n\t\tif (!this.imageData || (text && text !== this.text)) {\n\t\t\tthis.renderText(text)\n\t\t}\n\n\t\tif (this[prop] === undefined) {\n\t\t\tthis[prop] = measureFn(this.imageData)\n\t\t}\n\t\treturn this[prop]\n\t}\n\n\tcalcTopY(text) {\n\t\treturn this._calcMetric(text, '_topY', getTopY)\n\t}\n\n\tcalcBottomY(text) {\n\t\treturn this._calcMetric(text, '_bottomY', getBottomY)\n\t}\n\n\tcalcCenterY(text, { useCenterOfMass = false }) {\n\t\treturn this._calcMetric(text, '_centerY', useCenterOfMass ? getCM : getAbsCenter)\n\t}\n\n\t// keeping for demo at the moment\n\tgetCenterOfText(text, { centerText = false, useCenterOfMass = true, usePerChar = false } = {}) {\n\t\tconst { canvas, context } = this\n\n\t\tcontext.clearRect(0, 0, canvas.width, canvas.height)\n\n\t\tthis.text = text || this.text\n\t\tthis._initializeCanvas(this.text)\n\n\t\tconst measureFn = useCenterOfMass ? getCM : getAbsCenter\n\n\t\tlet measureResult\n\t\tif (usePerChar) {\n\t\t\tmeasureResult = this.getAvgOfPerLetterMedian(this.text, measureFn)\n\t\t} else {\n\t\t\tcontext.fillText(this.text, Math.round(canvas.width / 2), this.pad, canvas.width)\n\t\t\tconst imgData = context.getImageData(0, 0, canvas.width, canvas.height)\n\n\t\t\tmeasureResult = measureFn(imgData)\n\t\t}\n\n\t\tthis._center = measureResult.center\n\t\tthis._topY = measureResult.topY\n\t\tthis._bottomY = measureResult.bottomY\n\n\t\t// center text\n\t\t// for debug purposes when rendering internal canvas\n\t\tif (centerText || this._bgColor || this._textColor) {\n\t\t\tconst fixingOffset = centerText ? canvas.height / 2 - this._center : 0\n\n\t\t\tif (this._bgColor) {\n\t\t\t\tcontext.fillStyle = this._bgColor\n\t\t\t\tcontext.fillRect(0, 0, canvas.width, canvas.height)\n\t\t\t} else {\n\t\t\t\tcontext.clearRect(0, 0, canvas.width, canvas.height)\n\t\t\t}\n\n\t\t\tthis._textColor && (context.fillStyle = this._textColor)\n\t\t\tcontext.fillText(this.text, Math.round(canvas.width / 2), this.pad + fixingOffset, canvas.width)\n\t\t}\n\n\t\treturn this._center\n\t}\n\n\t// get offset which should vertically center text according to its calculated center\n\tgetCenteringOffset(text, centerCalcOpts) {\n\t\tconst center = this.getCenterOfText(text, centerCalcOpts)\n\t\tcontext.fillText(this.text, Math.round(canvas.width / 2), this.pad, canvas.width)\n\t\tthis.imageData = context.getImageData(0, 0, canvas.width, canvas.height)\n\n\t\tconst measureFn = useCenterOfMass ? getCM : getAbsCenter\n\t\tconst measureResult = measureFn(this.imageData)\n\t\treturn this.canvas.height / 2 - center\n\t}\n\n\t// get percentage of text height at which center occurs\n\tgetCenterHeightPercentage(text, centerCalcOpts) {\n\t\tconst center = this.getCenterOfText(text, centerCalcOpts)\n\n\t\t// get top and bottom y vals after calculating center\n\t\t// const topY = this._topY;\n\t\t// const bottomY = this._bottomY;\n\t\tconst topY = this.pad\n\t\tconst bottomY = this.canvas.height - this.pad\n\n\t\treturn (center - topY) / (bottomY - topY)\n\t}\n\n\tgetAvgOfPerLetterMedian(text, measureFn) {\n\t\tconst textWithoutSpaces = Array.prototype.filter.call(text, c => !/\\s/.test(c))\n\t\tconst centerResultsPerChar = textWithoutSpaces.map(char => {\n\t\t\tthis._initializeCanvas(char)\n\t\t\tthis.context.fillText(char, Math.round(this.canvas.width / 2), this.pad, this.canvas.width)\n\t\t\tconst imgData = this.context.getImageData(0, 0, this.canvas.width, this.canvas.height)\n\n\t\t\tconst measureResult = measureFn(imgData)\n\t\t\tmeasureResult.width = this.canvas.width\n\n\t\t\treturn measureResult\n\t\t})\n\n\t\t// reset canvas\n\t\tthis._initializeCanvas(text)\n\n\t\tconst totalWidth = getSum(centerResultsPerChar.map(result => result.width))\n\t\tconst centerWidthProducts = centerResultsPerChar.map(({ center, width }) => center * width)\n\t\tconst center = getSum(centerWidthProducts) / totalWidth\n\n\t\tconst topY = centerResultsPerChar.reduce((top, result) => Math.min(top, result.top), Infinity)\n\t\tconst bottomY = centerResultsPerChar.reduce((bottom, result) => Math.max(bottom, result.bottom), -Infinity)\n\n\t\treturn {\n\t\t\tcenter,\n\t\t\ttopY,\n\t\t\tbottomY\n\t\t}\n\t}\n}\n\nfunction getSum(nums) {\n\treturn nums.reduce((sum, num) => sum + num)\n}\n\nfunction avg(nums) {\n\tconst sum = getSum(nums)\n\tconst n = nums.length\n\treturn sum / n\n}\n\n// get center of mass based on alpha value at each ImageData pixel\nfunction getCM(imageData) {\n\tconst { data, height, width } = imageData\n\tconst imageDataRowWidth = 4 * width\n\tlet totalAlpha = 0,\n\t\ttopY\n\t// sum of (alpha value * y value in image matrix)\n\tlet alphaTimesY = 0\n\tfor (let i = 3, n = data.length; i < n; i += 4) {\n\t\tconst rowIdx = Math.floor(i / imageDataRowWidth)\n\t\tconst alpha = data[i]\n\t\tif (alpha > 0) {\n\t\t\t// store first rowIdx when alpha is greater than zero\n\t\t\tif (topY === undefined) {\n\t\t\t\ttopY = rowIdx\n\t\t\t}\n\n\t\t\talphaTimesY += alpha * (rowIdx + 0.5)\n\t\t\ttotalAlpha += alpha\n\t\t}\n\t}\n\n\tif (topY === undefined) {\n\t\ttopY = 0\n\t}\n\n\tconst center = alphaTimesY / totalAlpha\n\tconst bottomY = getBottomY(imageData)\n\treturn { center, bottomY, topY }\n}\n\nfunction getAbsCenter(imageData) {\n\tconst { data, height, width } = imageData\n\tconst imageDataRowWidth = 4 * width\n\n\t// find top y-value of text\n\tconst topY = getTopY(imageData)\n\n\t// find bottom y-value of text\n\tconst bottomY = getBottomY(imageData)\n\n\treturn {\n\t\tcenter: Math.round((topY + bottomY) / 2),\n\t\tbottomY,\n\t\ttopY\n\t}\n}\n\nfunction getTopY(imageData) {\n\tconst { data, height, width } = imageData\n\tconst imageDataRowWidth = 4 * width\n\n\tfor (let i = 3, n = data.length; i < n; i += 4) {\n\t\tconst rowIdx = Math.floor(i / imageDataRowWidth)\n\t\tconst alpha = data[i]\n\t\tif (alpha > 0) {\n\t\t\treturn rowIdx\n\t\t}\n\t}\n\treturn 0\n}\n\nfunction getBottomY(imageData) {\n\tconst { data, height, width } = imageData\n\tconst imageDataRowWidth = 4 * width\n\n\t// find bottom y-value in imageData\n\tfor (let i = data.length - 1; i > 0; i -= 4) {\n\t\tconst rowIdx = Math.floor(i / imageDataRowWidth)\n\t\tconst alpha = data[i]\n\t\tif (alpha > 0) {\n\t\t\treturn rowIdx\n\t\t}\n\t}\n\t// if don't find nonzero alpha value, return last idx value\n\treturn height - 1\n}\n\nexport default TextMeasurer\n"]}